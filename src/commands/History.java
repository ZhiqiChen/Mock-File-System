package commands;import java.util.*;import structures.*;import driver.*;//UTORID user_name: marjerr1//UT Student #: 1002548807//Author: Daniel Marjerrisonpublic class History implements Command{		//initializing an array list of allEntries	private ArrayList<String> allEntries;		/**	 * constructor for history	 * set allEntries to be an arraylist of strings	 */	public History() {		this.allEntries = new ArrayList<String>();	}		/**	 * get an arraylist of all the entries	 * @return	 */	public ArrayList<String> getAllEntries(){		return allEntries;	}		public void setAllEntries(ArrayList<String> allEntries) {		this.allEntries = allEntries;	}		   /**	   * Runs the command	   * @return void	   * @param String[] arguments	   */	public String runCommand(String[] arguments) {		System.out.println("history");		String history = "";		if (arguments != null) {			// if argument provided, call history to that depth			// THIS WILL CRASH IF ARGUMENT NOT AN INT			int num = Integer.parseInt(arguments[0]);			history = driver.JShell.getUserEntries().seeHistory(num);		}		else {			// show all history			history = driver.JShell.getUserEntries().seeHistory();		}		return history;	}	/**	 * Method to append a new command to the end of our saved directories	 * @param String (str)	 * @return void	 */	public void add(String str) {				allEntries.add(str);	}	/**	 * Method to See history of commands, up to depth	 * @param int (depth) number of history from latest command to be read	 * @return String the history with numbers to depth	 */	private String seeHistory(int depth) {		String finalResult = "";				if(depth>allEntries.size()-1) {			// if the depth given is higher than the number of entries			// in the history, just show all entries - don't crash			depth = allEntries.size()-1;		}		for (int i=allEntries.size()-depth-1; i<allEntries.size()-1; i++) {			// the last entry in allEntries is the "history" 			//command that is CURRENTLY being called			// do not include that one			int j = i+1;			finalResult+= j+"."+allEntries.get(i)+"\n";		}		return finalResult;	}	/**	 * Method to for if no depth specified, see all saved history	 * @return String see the whole history	 */	private String seeHistory() {			return seeHistory(allEntries.size()-1);	}		/**	 * Returns True if the command ran successfully 	 * @param arguments	 * @return boolean	 */	public static boolean isValid(String[] arguments) {	  // Check if have 1 or 0 arguments, and that argument is a number      boolean match = false;      if(arguments == null) {        match = true;      }      else if (arguments.length == 1) {        match = true;      }      return match;    }		/**	 * toString for History	 */	public String toString() {      return"history [number]\r\n" +           "This command will print out recent commands, one command per line.";    }	}